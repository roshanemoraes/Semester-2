#include <iostream>
using namespace std;

// function to heapify the tree
void heapify(int arr[], int n, int root)
{
   // build heapify
   int maximum = root;  
   int left = 2 * root + 1;
   int right = 2 * root + 2;

   // If left node is greater than the root
   if (left<n && arr[left]>arr[maximum]){
        maximum = left;
   }

   // If right node is greater than largest
   if (right<n && arr[right]>arr[maximum]){
        maximum = right;
   }

   // If largest is not the root
   if (maximum != root) {

        swap(arr[root], arr[maximum]);

        //Recursively heapify
        heapify(arr, n, maximum);
    }

}

// implementing heap sort
void heapSort(int arr[], int n)
{
    // build heap
    for (int i=n/2-1; i>=0; i--){
         heapify(arr, n, i);
    }

    //extracting elements from heap one by one
    for (int i=n-1; i>=0; i--) {
        swap(arr[0], arr[i]);

        //call max heapify
        heapify(arr, i, 0);
    }   
}

/* print contents of array */
void displayArray(int arr[], int n)
{
   for (int i=0; i<n; ++i)
   cout << arr[i] << " ";
   cout << "\n";
}

int main()
{
    int n;
    cout << "Enter the size of the array: ";
    cin >> n;

    int heap_arr[n];
    cout << "Enter " << n << " numbers: ";
    for (int i=0; i<n; i++){
        cin >> heap_arr[i];
    }
    
    cout<<"Input array"<<endl;
    displayArray(heap_arr,n);

    heapSort(heap_arr, n);

    cout << "Sorted array"<<endl;
    displayArray(heap_arr, n);
}
