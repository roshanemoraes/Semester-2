#include <iostream>
#include <chrono>
#include <unistd.h>
using namespace std;

class Node {
public:
    int value;
    Node* next;

    Node(int x) {
        value = x;
        next = nullptr;
    }
};

class Stack {
private:
    Node* head;

public:
    Stack() {
        head = nullptr;
    }

    bool isEmpty() {
        return head == nullptr;
    }

    void push(int x) {
        Node* newNode = new Node(x);
        newNode->next = head;
        head = newNode;
    }

    void pop() {
        if (isEmpty()) {
            cout << "Stack underflow" << endl;
            throw std::logic_error("Stack underflow!");
            return;
        }
        Node* temp = head;
        head = head->next;
        delete temp;
    }

    int stackTop() {
        if (isEmpty()) {
            cout << "Stack is empty" << endl;
            return -1;
        }
        return head->value;
    }

    void display() {
        cout << "Stack: ";
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->value << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    cout << "Welcome to value Structures and Algorithm In-Class Lab - 5" << endl << endl
         << "Implementation of Stack using Linked Lists." << endl << endl;
    Stack stack;
    auto start = chrono::steady_clock::now();
    stack.push(8);
    stack.push(10);
    stack.push(5);
    stack.push(11);
    stack.push(15);
    stack.push(23);
    stack.push(6);
    stack.push(18);
    stack.push(20);
    stack.push(17);
    stack.display();
    for(int i = 0; i < 11; i++){
        stack.pop();
    }
    stack.display();
    stack.push(4);
    stack.push(30);
    stack.push(3);
    stack.push(1);
    stack.display();
    auto end = chrono::steady_clock::now();
    chrono::duration_cast<chrono::nanoseconds>(end - start).count();
    cout << "Elapsed time in nanoseconds: "
        << chrono::duration_cast<chrono::microseconds>(end - start).count()
        << " micro seconds" << endl;

    return 0;
}
