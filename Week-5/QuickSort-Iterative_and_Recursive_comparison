#include <iostream>
#include<list>
#include<stack>
#include<chrono>
#include<vector>
#include<iomanip>
#include <unistd.h>
using namespace std;

void swap(int *a,int *b){
    int temp = *a;
    *a=*b;
    *b = temp;
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);
    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void recursive_quickSort(int A[], int p, int r){
    if (p < r){
        int q = partition(A, p,r);
        recursive_quickSort(A, p, q - 1);
        recursive_quickSort(A, q + 1, r);
    }
}

// void iterative_quick_sort(int arr[], int low, int high) {
//     stack<int> stk;
//     stk.push(low);
//     stk.push(high);
//     while (!stk.empty()) {
//         high = stk.top();
//         stk.pop();
//         low = stk.top();
//         stk.pop();
//         int p = partition(arr, low, high);
//         if (p - 1 > low) {
//             stk.push(low);
//             stk.push(p - 1);
//         }
//         if (p + 1 < high) {
//             stk.push(p + 1);
//             stk.push(high);
//         }
//     }
// }

void iterative_quick_sort(int arr[], int low, int high) {
    int range = high - low + 1;
    int* stack = new int[range];
    int top = -1;
    stack[++top] = low;
    stack[++top] = high;
    while (top >= 0) {
        high = stack[top--];
        low = stack[top--];
        int p = partition(arr, low, high);
        if (p - 1 > low) {
            stack[++top] = low;
            stack[++top] = p - 1;
        }
        if (p + 1 < high) {
            stack[++top] = p + 1;
            stack[++top] = high;
        }
    }
    delete[] stack;
}

void print_array(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main(){
    vector<int> lengths{25000, 50000, 100000, 200000, 500000, 1000000};
    cout << "length of array   recursive     iterative" << endl;
    for(int length:lengths){
        cout << left << setw(18) << length;
        // vector<int> array(length, 0);

        int array1[length];
        int array2[length];
        for (int i = 0; i < length; i++){
            int random = rand() % 1000;
            array1[i] = random;
            array2[i] = random;
        }

        auto start_1 = chrono::steady_clock::now();

        recursive_quickSort(array1, 0, length - 1);
    
        auto end_1 = chrono::steady_clock::now();
        cout << left << setw(14)
             << chrono::duration_cast<chrono::milliseconds>(end_1 - start_1).count();

        auto start_2 = chrono::steady_clock::now();

        iterative_quick_sort(array2, 0, length - 1);

        auto end_2 = chrono::steady_clock::now();
        cout << chrono::duration_cast<chrono::milliseconds>(end_2 - start_2).count()
             << endl;
        
    }
    return 0;
    //___________________________________________________________________________
    // int arr[] = { 9, 3, 5, 1, 8, 2, 7, 4, 6 };
    // int n = sizeof(arr)/sizeof(arr[0]);

    // auto start_1 = chrono::steady_clock::now();

    // recursive_quickSort(arr, 0, n-1);
    
    // auto end_1 = chrono::steady_clock::now();
    // cout << "Time taken for Recursive Quicksort: " 
    //      << chrono::duration_cast<chrono::nanoseconds>(end_1 - start_1).count()
    //      << endl;
    // // print_array(arr, n);

    // auto start_2 = chrono::steady_clock::now();

    // iterative_quick_sort(arr, 0, n - 1);

    // auto end_2 = chrono::steady_clock::now();
    // cout << "Time taken for Iterative Quicksort: " 
    //      << chrono::duration_cast<chrono::nanoseconds>(end_2 - start_2).count();
    // // print_array(arr, n);
    //________________________________________________________________________________
    return 0;
}
